# -*- coding: utf-8 -*-
"""Egg_crack_other.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HzFDpQlY4TNmrJ_s07uaceiBp1Giww5_

**EGG CRACK DETECTION USING YOLOV8**

**Business Problem:** Manually counting the number of cracked eggs is extremely laborious and time consuming.

**Business Objective:** Minimize manual counting of cracked  eggs.

**Business Constraint:** Minimize the cost of solution.

**Business success criteria:** Minimize the manual effort by at least 10%.

**Machine Learning  success criteria:** Achieve an accuracy of at least 96%.

**Economic success criteria:** Achieve a cost saving of at least $1M
"""

!nvidia-smi

import tensorflow as tf
print("GPU is available" if tf.config.list_physical_devices('GPU') else "GPU is NOT available") # Checking the GPU is using or not.

import os
os.getcwd()

#!pip install ultralytics

from IPython.display import display, Image
from IPython import display
display.clear_output()

import ultralytics as ut

ut.checks()

! pip install roboflow
display.clear_output()

from roboflow import Roboflow
rf = Roboflow(api_key="VEPLuios2Hf5LgrmV9rn")
project = rf.workspace("innodatatics-fgwx5").project("egg-crack-detection-rxfq8")
dataset = project.version(1).download("yolov8")

import shutil

shutil.rmtree('/content/runs')

from ultralytics import YOLO

model = YOLO('yolov8n.pt')  # load a pretrained model (recommended for training)

results = model.train( data='/content/EGG-CRACK-DETECTION-1/data.yaml', imgsz=640,epochs=30 , lr0 = 0.00269)

import shutil
from google.colab import files

# Replace 'source_folder' with the actual name of your source folder
shutil.make_archive("/content/runs", 'zip', "/content/runs")

# Download the zip file
files.download("/content/runs.zip")

Image('/content/runs/detect/train/results.png')

Image('/content/runs/detect/train/confusion_matrix.png')

